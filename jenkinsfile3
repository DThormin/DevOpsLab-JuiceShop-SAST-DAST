pipeline{
    agent any
    environment {
        NAME_APP = "dvwa-docker"
        PORT_APP = "81"
    }

    stages {
        stage('Repositório de Código'){
          steps{
            git url: 'https://gitlab.com/o_sgoncalves/dvwa-docker'
            stash 'dvwa-repo'
          }
        }

        stage('SAST com Sonarqube'){
           agent { node 'tormin' }
           environment {
             scanner = tool 'sonarqube-scanner'
           }
           steps {
             git url: 'https://github.com/juice-shop/juice-shop'
             //Referencia ao plugin do Sonarqube Server configurado no jenkins
             withSonarQubeEnv('sonarqube'){
               sh "${scanner}/bin/sonar-scanner -Dsonar.projectKey=$NAME_APP -Dsonar.sources=${WORKSPACE}/ -Dsonar.projectVersion=${BUILD_NUMBER}"
             }

             waitForQualityGate abortPipeline: true
           }
         }
        stage('Build da imagem'){
            agent { node 'tormin' }
            steps {
            git url: 'https://gitlab.com/o_sgoncalves/dvwa-docker'
                script {
                    docker.build "$NAME_APP:latest"
                }
            }
        }

        stage('Executando Container'){
            agent { node 'tormin' }
            steps {
                sh '''
                    if [ ! "$(curl -s localhost:$PORT_APP &> /dev/null)" ]; then
                    docker run -d --name $NAME_APP -p $PORT_APP:80 $NAME_APP:latest
                    fi
                '''
            }
        }
    }

    stage('DAST com OWASP ZAP'){
             agent { node 'tormin' }
             environment {
               ZAP_PATH = "/usr/share/owasp-zap/"
               ZAP_LOG_PATH = "$WORKSPACE"
               ZAP_API_KEY = "baJHhHt7AihJzDcMdgB32lTje"
               APP_URL = "http://10.158.0.3"
             }

             steps {
               // execucao do ZAP usando zap-cli-v2
               sh 'zap-cli-v2 start -o "-config api.key=$ZAP_API_KEY -config ajaxSpider.browserId=htmlunit -config connection.timeoutInSecs=1200 -dir ${WORKSPACE} -addoninstallall"'
               sh "zap-cli-v2 status"
               sh "zap-cli-v2 -v spider $APP_URL"
               sh "zap-cli-v2 -v ajax-spider $APP_URL"
               sh "zap-cli-v2 -v active-scan -r $APP_URL"
               sh "zap-cli-v2 report -o reports/vuln-report-${BUILD_NUMBER}.html -f html"
               sh "zap-cli-v2 shutdown"

               // Publicacao dos relatorio em formato HTML
               publishHTML([
               allowMissing: false,
               alwaysLinkToLastBuild: true,
               keepAll: true,
               reportDir: 'reports/',
               reportFiles: 'vuln-report-${BUILD_NUMBER}.html',
               reportName: 'OWASP ZAP - VULNERABILITY REPORT'
               ])
             }
           }
    post {
        always{
            chuckNorris()
        }
        success {
            echo "Pipeline executado com sucesso!!"
        }
        failure {
            echo "Pipeline falhou!"
        }
    }
}
